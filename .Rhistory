6.79, 6.62, 7.32, 7.25, 6.48, 6.12, 6.17, 6.67, 6.55, 6.34, 6.55, 6.69,
6.40, 6.75, 6.94, 7.19, 6.45, 7.34, 7.15, 6.95)
summary(obsE)
install.packages("astsa")
library(astsa)
auto.arima(ts.obsE)
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
auto.arima(ts.obsE)
fa = forecast(ts.obsE, h=2)
fa
fa$model
fa$
fa$method
fa$method
fa$seasonal
summary(fa)
fa = forecast(ts.obsE)
fa
summary(fa)
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
plot(decompose(ts.obsE))
plot(diff(ts.obsE,lag=25))
obsE = c(7.22, 7.14, 7.05, 6.78, 7.29, 6.76, 6.82, 6.96, 7.09, 6.88, 7.21, 7.12,
6.88, 6.59, 6.81, 7.54, 7.59, 7.38, 7.33, 6.85, 6.62, 7.04, 6.86, 6.71,
6.56, 7.07, 6.34, 7.02, 6.90, 7.07, 7.05, 7.04, 7.14, 6.94, 6.96, 6.85,
7.05, 6.73, 7.24, 6.96, 6.82, 7.20, 6.93, 6.94, 7.09, 7.04, 6.51, 7.13,
6.79, 6.62, 7.32, 7.25, 6.48, 6.12, 6.17, 6.67, 6.55, 6.34, 6.55, 6.69,
6.40, 6.75, 6.94, 7.19, 6.45, 7.34, 7.15, 6.95)
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 1)
plot(decompose(ts.obsE))
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
plot(decompose(ts.obsE))
plot(decompose(ts.obsE, type="additive"))
plot(decompose(ts.obsE, type="multiplicative"))
plot(decompose(ts.obsE, type="multiplicative"))
plot(decompose(ts.obsE, type="additive"))
plot(decompose(ts.obsE, type="multiplicative"))
dec = decompose(ts.obsE, type="additive")
dec
tsTrend = ts.obsE - dec$seasonal
plot(tsTrend)
plot(dec$seasonal)
plot(dec$trend)
mean(dec$random)
mean(dec$random, na.omit=TRUE)
mean(dec$random, na.omit=TRUE)
dec$random
mean(na.omit(dec$random))
print(ts.obsE)
obsE = c(5.25, 5.64, 5.76, 5.69, 5.50, 5.37, 5.82, 5.34, 5.18, 5.84, 6.52, 5.57,
5.39, 5.43, 5.51, 4.89, 5.41, 5.96, 5.96, 5.31, 5.70, 5.39, 6.21, 5.61,
6.16, 5.77, 5.94, 5.19, 5.56, 5.40, 5.58, 5.63, 5.18, 5.49, 6.12, 6.44,
5.74, 5.83, 5.82, 5.55, 4.87, 6.06, 5.97, 5.22, 4.80, 5.40, 6.35, 6.16,
6.47, 6.18, 6.58, 6.06, 5.59, 5.71, 5.48, 5.31, 5.57, 5.88, 4.99, 5.44,
5.48, 5.67, 5.24, 5.63, 6.09, 5.43, 5.60)
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
plot(decompose(ts.obsE, type="additive"))
plot(decompose(ts.obsE, type="multiplicative"))
dec = decompose(ts.obsE, type="additive")
dec
tsTrend = ts.obsE - dec$seasonal
plot(dec$seasonal)
plot(dec$trend)
mean(dec$random, na.omit=TRUE)
mean(na.omit(dec$random))
print(ts.obsE)
plot(tsTrend)
Box.test(ts.obsE, lag=25, fitdf=10, type="Ljung")
acf(ts.obsE)
pacf(ts.obsE)
plot(diff(ts.obsE,lag=25))
ts.obsE = window(tx.obsE, start=c(2013,30))
ts.obsE = window(ts.obsE, start=c(2013,30))
plot(decompose(ts.obsE, type="additive"))
ts.obsE
ts.obsE = window(ts.obsE, start=c(2013,4))
ts.obsE = window(ts.obsE, start=c(2013,4))
ts.obsE = window(ts.obsE, start=c(2013,5))
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
ts.obsE = window(ts.obsE, start=c(2013,5))
plot(decompose(ts.obsE, type="additive"))
plot(decompose(ts.obsE, type="multiplicative"))
dec = decompose(ts.obsE, type="additive")
dec
tsTrend = ts.obsE - dec$seasonal
plot(dec$seasonal)
plot(dec$trend)
mean(dec$random, na.omit=TRUE)
mean(na.omit(dec$random))
print(ts.obsE)
mean(na.omit(dec$random))
library(tseries)
library(forecast)
# Observacions quinzenals
obsE = c(7.22, 7.14, 7.05, 6.78, 7.29, 6.76, 6.82, 6.96, 7.09, 6.88, 7.21, 7.12,
6.88, 6.59, 6.81, 7.54, 7.59, 7.38, 7.33, 6.85, 6.62, 7.04, 6.86, 6.71,
6.56, 7.07, 6.34, 7.02, 6.90, 7.07, 7.05, 7.04, 7.14, 6.94, 6.96, 6.85,
7.05, 6.73, 7.24, 6.96, 6.82, 7.20, 6.93, 6.94, 7.09, 7.04, 6.51, 7.13,
6.79, 6.62, 7.32, 7.25, 6.48, 6.12, 6.17, 6.67, 6.55, 6.34, 6.55, 6.69,
6.40, 6.75, 6.94, 7.19, 6.45, 7.34, 7.15)
obsG = c(5.25, 5.64, 5.76, 5.69, 5.50, 5.37, 5.82, 5.34, 5.18, 5.84, 6.52, 5.57,
5.39, 5.43, 5.51, 4.89, 5.41, 5.96, 5.96, 5.31, 5.70, 5.39, 6.21, 5.61,
6.16, 5.77, 5.94, 5.19, 5.56, 5.40, 5.58, 5.63, 5.18, 5.49, 6.12, 6.44,
5.74, 5.83, 5.82, 5.55, 4.87, 6.06, 5.97, 5.22, 4.80, 5.40, 6.35, 6.16,
6.47, 6.18, 6.58, 6.06, 5.59, 5.71, 5.48, 5.31, 5.57, 5.88, 4.99, 5.44,
5.48, 5.67, 5.24, 5.63, 6.09, 5.43, 5.60)
cEstudi = obsE
dfEstudi = as.data.frame(cEstudi)
tsEstudi = ts(cEstudi, start=c(2013,1), frequency = 25)
tsEstudi
# Descomposició de la sèrie
layout(matrix(1:1))
plot(decompose(tsEstudi))
obsE = c(7.22, 7.14, 7.05, 6.78, 7.29, 6.76, 6.82, 6.96, 7.09, 6.88, 7.21, 7.12,
6.88, 6.59, 6.81, 7.54, 7.59, 7.38, 7.33, 6.85, 6.62, 7.04, 6.86, 6.71,
6.56, 7.07, 6.34, 7.02, 6.90, 7.07, 7.05, 7.04, 7.14, 6.94, 6.96, 6.85,
7.05, 6.73, 7.24, 6.96, 6.82, 7.20, 6.93, 6.94, 7.09, 7.04, 6.51, 7.13,
6.79, 6.62, 7.32, 7.25, 6.48, 6.12, 6.17, 6.67, 6.55, 6.34, 6.55, 6.69,
6.40, 6.75, 6.94, 7.19, 6.45, 7.34, 7.15, 6.95)
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
ts.obsE = window(ts.obsE, start=c(2013,5))
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
plot(decompose(ts.obsE, type="additive"))
ts.obsE = ts(obsE, start=c(2013,1),  frequency = 25)
ts.obsE = diff(ts.obsE)
plot(decompose(ts.obsE, type="additive"))
#plot(decompose(ts.obsE, type="multiplicative"))
dec = decompose(ts.obsE, type="additive")
dec
tsTrend = ts.obsE - dec$seasonal
plot(dec$seasonal)
plot(dec$trend)
mean(dec$random, na.omit=TRUE)
mean(dec$random, na.rm=TRUE)
print(ts.obsE)
plot(tsTrend)
Box.test(ts.obsE, lag=25, fitdf=10, type="Ljung")
acf(ts.obsE)
pacf(ts.obsE)
arima.obsE = arima(ts.obsE, order=c(2,2,2), seasonal=list(order=c(0,2,1), period=13))
fore <- predict(arima.obsE, h=2)
model = auto.arima(ts.obsE)
library(forecast)
library(forecast)
model = auto.arima(ts.obsE)
model
arima.obsE = arima(ts.obsE, order=c(2,0,1), seasonal=list(order=c(0,1,0), period=25))
fore <- predict(arima.obsE, h=2)
fore
U <- fore$pred + 2*fore$se
L <- fore$pred - 2*fore$se
ts.plot(ts.obsE, fore$pred, U, L)
getrmse <- function(x,h,...)
{
train.end <- time(x)[length(x)-h]
test.start <- time(x)[length(x)-h+1]
train <- window(x,end=train.end)
test <- window(x,start=test.start)
fit <- Arima(train,...)
fc <- forecast(fit,h=h)
return(accuracy(fc,test)[2,"RMSE"])
}
getrmse(ts.obsE,h=26,order=c(0,1,0),seasonal=c(0,1,0),lambda=0)
getrmse(ts.obsE,h=26,order=c(0,1,1),seasonal=c(0,1,0),lambda=0)
getrmse(ts.obsE,h=26,order=c(1,1,0),seasonal=c(0,1,0),lambda=0)
getrmse(ts.obsE,h=26,order=c(1,1,1),seasonal=c(0,1,0),lambda=0)
fa = forecast(ts.obsE, h=2)
fa$method
fa$seasona
summary(fa)
cEstudi = ts.obsE
n1.vtr <- as.numeric(cEstudi)
p1 <- shapiro.test(n1.vtr)$p.value
p2 <- shapiro.test(diff(n1.vtr))$p.value
p3 <- shapiro.test(diff(log(n1.vtr)))$p.value
layout(matrix(1:6, 2, 3, byrow = TRUE))
hist(n1.vtr, prob = T, main = c("n1", paste("Shapiro p=", prettyNum(p1, digits = 2))), xlab = "n1", xlim = c(1, 45))
lines(density(n1.vtr))
hist(diff(n1.vtr), prob = T, main = c("diff(n1)", paste("Shapiro p=", prettyNum(p2, digits = 2))), xlab = "diff(n1)")
lines(density(diff(n1.vtr)))
hist(diff(log(n1.vtr)), prob = T, main = c("diff(log(n1))", paste("Shapiro p=", prettyNum(p3, digits = 2))), xlab = "diff(log(n1))")
lines(density(diff(log(n1.vtr))))
# QQ plot of the above
qqnorm(cEstudi)
qqnorm(diff(cEstudi))
qqnorm(diff(log(cEstudi)))
layout(matrix(1:3, 1, 3, byrow = TRUE))
# ACF plot
acf(tsEstudi, main = "n1")
tsEstudi = ts.obsE
# ACF plot
tsEstudi = na.omit(tsEstudi)
# ACF plot
acf(tsEstudi, main = "n1")
acf(diff(tsEstudi), main = "diff(n1)")
acf(diff(log(tsEstudi)), main = "diff(log(n1))")
#### Test the column for stationary ####
# Augmented Dickey-Fuller (ADF) test The null-hypothesis for an ADF
# test is that the data is non-stationary.
# Therefore, p>0.05 is non-stationary
adf.test(tsEstudi, alternative = "stationary")
library(tseries)
library(tseries)
#### Test the column for stationary ####
# Augmented Dickey-Fuller (ADF) test The null-hypothesis for an ADF
# test is that the data is non-stationary.
# Therefore, p>0.05 is non-stationary
adf.test(tsEstudi, alternative = "stationary")
library(forecast)
library(tseries)
adf.test(tsEstudi, alternative = "stationary")
adf.test(diff(tsEstudi), alternative = "stationary")
adf.test(diff(log(tsEstudi)), alternative = "stationary")
adf.test(tsEstudi, alternative = "stationary")
adf.test(diff(tsEstudi), alternative = "stationary")
nsdiffs(tsEstudi)
nsdiffs(diff(tsEstudi))
nsdiffs(diff(log(tsEstudi)))
f3 <- forecast(auto.arima(diff(log(tsEstudi))), h = 1)
f3 <- forecast(auto.arima(diff(tsEstudi)), h = 1)
f3 <- forecast(auto.arima(diff(tsEstudi)), h = 1)
f3
summary(tsEstudi)
hist(diff(obsE))
hist(diff(obsG))
obsG = c(5.25, 5.64, 5.76, 5.69, 5.50, 5.37, 5.82, 5.34, 5.18, 5.84, 6.52, 5.57,
5.39, 5.43, 5.51, 4.89, 5.41, 5.96, 5.96, 5.31, 5.70, 5.39, 6.21, 5.61,
6.16, 5.77, 5.94, 5.19, 5.56, 5.40, 5.58, 5.63, 5.18, 5.49, 6.12, 6.44,
5.74, 5.83, 5.82, 5.55, 4.87, 6.06, 5.97, 5.22, 4.80, 5.40, 6.35, 6.16,
6.47, 6.18, 6.58, 6.06, 5.59, 5.71, 5.48, 5.31, 5.57, 5.88, 4.99, 5.44,
5.48, 5.67, 5.24, 5.63, 6.09, 5.43, 5.60)
hist(diff(obsG))
obsE = c(7.22, 7.14, 7.05, 6.78, 7.29, 6.76, 6.82, 6.96, 7.09, 6.88, 7.21, 7.12,
6.88, 6.59, 6.81, 7.54, 7.59, 7.38, 7.33, 6.85, 6.62, 7.04, 6.86, 6.71,
6.56, 7.07, 6.34, 7.02, 6.90, 7.07, 7.05, 7.04, 7.14, 6.94, 6.96, 6.85,
7.05, 6.73, 7.24, 6.96, 6.82, 7.20, 6.93, 6.94, 7.09, 7.04, 6.51, 7.13,
6.79, 6.62, 7.32, 7.25, 6.48, 6.12, 6.17, 6.67, 6.55, 6.34, 6.55, 6.69,
6.40, 6.75, 6.94, 7.19, 6.45, 7.34, 7.15)
obsG = c(5.25, 5.64, 5.76, 5.69, 5.50, 5.37, 5.82, 5.34, 5.18, 5.84, 6.52, 5.57,
5.39, 5.43, 5.51, 4.89, 5.41, 5.96, 5.96, 5.31, 5.70, 5.39, 6.21, 5.61,
6.16, 5.77, 5.94, 5.19, 5.56, 5.40, 5.58, 5.63, 5.18, 5.49, 6.12, 6.44,
5.74, 5.83, 5.82, 5.55, 4.87, 6.06, 5.97, 5.22, 4.80, 5.40, 6.35, 6.16,
6.47, 6.18, 6.58, 6.06, 5.59, 5.71, 5.48, 5.31, 5.57, 5.88, 4.99, 5.44,
5.48, 5.67, 5.24, 5.63, 6.09, 5.43, 5.60)
# Comparació de dos mostres
hist(diff(obsE))
hist(diff(obsG))
diff(obsG)
obsG
setwd("~/Documents/Github/Exploration Data Analysis")
list.files("data")
setwd("~/Documents/Github/Exploration Data Analysis")
strFileName = "data/household_power_consumption.txt"
df <- read.table(strFileName, header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
df$Date = as.Date(df$Date, "%d/%m/%Y")
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
setwd("~/Documents/Github/Exploration Data Analysis")
strFileName = "data/household_power_consumption.txt"
df <- read.table(strFileName, header=TRUE, sep=";", colClasses=c("character", "character", rep("numeric",7)), na="?")
df$Date = as.Date(df$Date, "%d/%m/%Y")
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% fechas)
df <- subset(df, Date %in% dateRange)
setwd("~/Documents/Github/Exploration Data Analysis")
strFileName = "data/household_power_consumption.txt"
# Loading data
df <- read.table(strFileName, header=TRUE, sep=";", na="?")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
df$Time = as.character(df$Time)
df <- read.table(strFileName, header=TRUE, sep=";", na="?", colClasses=c("character", "character", rep("numeric",7)))
df <- read.table(strFileName, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Time
df <- read.table(strFileName, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, file="data/subsetData.rds")
df1 = readRDS(file="data/subsetData.rds")
# LoadData.R
# Environment
setwd("~/Documents/Github/Exploration Data Analysis")
strSourceFile = "data/household_power_consumption.txt"
strDestFile = "data/subsetData.rds"
# Loading data
df <- read.table(strSourceFile, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, file="data/subsetData.rds")
setwd("~/Documents/Github/Exploration Data Analysis")
strSourceFile = "data/household_power_consumption.txt"
strDestFile = "data/subsetData.rds"
# Loading data
if ! file.exists(strDestFile) {
if ! file.exists(strDestFile) {
df <- read.table(strSourceFile, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, file="data/subsetData.rds")
}
else {
df = readRDS(file=strDestFile)
}
setwd("~/Documents/Github/Exploration Data Analysis")
strSourceFile = "data/household_power_consumption.txt"
strDestFile = "data/subsetData.rds"
# Loading data
if ! file.exists(strDestFile) {
df <- read.table(strSourceFile, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, strDestFile)
}
else {
df = readRDS(strDestFile)
}
setwd("~/Documents/Github/Exploration Data Analysis")
strSourceFile = "data/household_power_consumption.txt"
strDestFile = "data/subsetData.rds"
# Loading data
if (! file.exists(strDestFile)) {
df <- read.table(strSourceFile, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, strDestFile)
}
else {
df = readRDS(strDestFile)
}
!file.exists(strDestFile)
file.exists(strDestFile)
if (!file.exists(strDestFile)) {
df <- read.table(strSourceFile, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, strDestFile)
} else {
df = readRDS(strDestFile)
}
setwd("~/Documents/Github/Exploration Data Analysis")
strSourceFile = "data/household_power_consumption.txt"
strDestFile = "data/subsetData.rds"
# Loading data
if (!file.exists(strDestFile)) {
df <- read.table(strSourceFile, header=TRUE, sep=";", na="?", stringsAsFactors = FALSE)
df$Time <- strptime(paste(df$Date, df$Time), "%d/%m/%Y %H:%M:%S")
df$Date = as.Date(df$Date, "%d/%m/%Y")
#Subsetting dataframe
dateRange <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
df <- subset(df, Date %in% dateRange)
saveRDS(df, strDestFile)
} else {
df = readRDS(strDestFile)
}
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
rm(c(strSourceFile, strDestFile))
rm(list(strSourceFile, strDestFile))
rm(strDestFile))
rm(strSourceFile)
rm(strDestFile)
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
png("graficos/plot1.png", width = 480, height = 480)
hist(df$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
dev.off()
plot1 <- paste(getwd(), "/figure/plot1.png", sep = "")
png("graficos/plot1.png", width = 480, height = 480)
png("figure/plot1.png", width = 480, height = 480)
hist(df$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
dev.off()
file.remove(plot1)
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
plot1 <- "figure/plot1.png"
if (file.exists(plot1)){
file.remove(plot1)
}
png("figure/plot1.png", width = 480, height = 480)
hist(df$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
dev.off()
# plot2.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
plot2 <- "figure/plot2.png"
if (file.exists(plot2)){
file.remove(plot2)
}
png("graficos/plot2.png", width = 480, height = 480)
plot(df$Time, df$Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)"type = "l")
dev.off()
# plot2.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
plot2 <- "figure/plot2.png"
if (file.exists(plot2)){
file.remove(plot2)
}
png("graficos/plot2.png", width = 480, height = 480)
plot(df$Time, df$Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
dev.off()
png("figure/plot2.png", width = 480, height = 480)
plot(df$Time, df$Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
dev.off()
# plot1.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
strDestPlot <- "figure/plot1.png"
if (file.exists(strDestPlot)){
file.remove(strDestPlot)
}
png(strDestPlot, width = 480, height = 480)
hist(df$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
dev.off()
# plot2.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
strDestPlot <- "figure/plot2.png"
if (file.exists(strDestPlot)){
file.remove(strDestPlot)
}
png(strDestPlot, width = 480, height = 480)
plot(df$Time, df$Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
dev.off()
# plot3.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
strDestPlot <- "figure/plot3.png"
if (file.exists(strDestPlot)){
file.remove(strDestPlot)
}
png(strDestPlot, width = 480, height = 480)
plot(df$Time, df$Sub_metering_1, col = "black", xlab = "", ylab = "Energy sub metering", type = "l")
lines(df$Time, cargardatos$Sub_metering_2, type="l", col="red")
lines(df$Time, cargardatos$Sub_metering_3, type="l", col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black", "red", "blue"), lwd=2)
dev.off()
# plot3.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
strDestPlot <- "figure/plot3.png"
if (file.exists(strDestPlot)){
file.remove(strDestPlot)
}
png(strDestPlot, width = 480, height = 480)
plot(df$Time, df$Sub_metering_1, col = "black", xlab = "", ylab = "Energy sub metering", type = "l")
lines(df$Time, df$Sub_metering_2, type="l", col="red")
lines(df$Time, df$Sub_metering_3, type="l", col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black", "red", "blue"), lwd=2)
dev.off()
# plot4.R
# Environment, load data and remove old plot.
setwd("~/Documents/Github/Exploration Data Analysis")
source("LoadData.R")
strDestPlot <- "figure/plot4.png"
if (file.exists(strDestPlot)){
file.remove(strDestPlot)
}
png(strDestPlot, width = 480, height = 480)
par(mfrow=c(2,2))
plot(df$Time, df$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(df$Time, df$Voltage, type = "l", xlab = "datetime", ylab = "Global Active Power")
plot(df$Time, df$Sub_metering_1, type = "l", col = "black", xlab = "", ylab = "Energy sub metering")
lines(df$Time, df$Sub_metering_2, type="l", col="red")
lines(df$Time, df$Sub_metering_3, type="l", col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lwd=2, col=c("black", "red", "blue"))
plot(df$Time, df$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global Active Power")
dev.off()
plot(df$Time, df$Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
dev.off()
plot(df$Time, df$Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(df$Time, df$Voltage, xlab = "datetime", ylab = "Global Active Power", type = "l")
plot(df$Time, df$Sub_metering_1, col = "black", xlab = "", ylab = "Energy sub metering", type = "l")
lines(df$Time, df$Sub_metering_2, col="red", type="l")
lines(df$Time, df$Sub_metering_3, col="blue", type="l")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black", "red", "blue"), lwd=2)
plot(df$Time, df$Global_reactive_power, xlab = "datetime", ylab = "Global Active Power", type = "l")
dev.off()
